<?php
    // Введение в классы и объекты в PHP

    // Сейчас мы с вами займемся изучением ООП в PHP. Давайте рассмотрим пример из жизни, а потом перенесем его на PHP.
    
    // В качестве примера возьмем автомобиль. У него есть колеса, цвет, вид кузова, объем двигателя и так далее. Кроме того, водитель может отдавать ему команды: ехать, остановится, повернуть направо, налево и тп.
    
    // Можно говорить о том, что существует некоторый класс автомобилей, обладающий общими свойствами (у всех есть колеса и всем им можно отдавать команды).
    
    // Конкретный автомобиль, стоящий на улице - это представитель этого класса, или, другими словами, объект этого класса. У всех объектов этого класса есть свойства: количество колес, цвет, вид кузова и методы: ехать, остановится, повернуть направо, налево.
    
    // Другими словами сам класс - это чертеж, по которым на заводе делаются автомобили. Объект же - это сама машина, сделанная по этим чертежам.
    
    // В PHP класс создается с помощью ключевого слова class, за которым следует название этого класса. Давайте сделаем класс Car:
	class Car
	{
		// тут код, то есть PHP-чертеж автомобиля 
	}


//     Укажем теперь в нашем чертеже, что любой автомобиль, созданный по этому чертежу, будет иметь свойство для цвета и свойство для количества топлива.

// Для этого внутри класса напишем свойство $color и свойство $fuel:
class Car
	{
		// Зададим свойства (по сути переменные класса): 
		public $color; // цвет автомобиля
		public $fuel; // количество топлива
	}


//     Давайте теперь сделаем методы нашего класса. В PHP методы, подобно обычным функциям, объявляются с помощью ключевого слова function, перед которым пишется ключевое слово public.

// Как уже упоминалось выше, наш автомобиль может ехать, может поворачивать, может останавливаться. Сделаем соответствующие методы в нашем классе:
class Car
{
    public $color; // цвет автомобиля
    public $fuel; // количество топлива
    
    // Команда ехать:
    public function go()
    {
        // какой-то PHP код
    }
    
    // Команда поворачивать:
    public function turn()
    {
        // какой-то PHP код
    }
    
    // Команда остановиться:
    public function stop()
    {
        // какой-то PHP код
    }
}

// Мы с вами сделали чертеж нашего автомобиля. Теперь нужно отправится на завод и сделать объект этого класса (то есть конкретный автомобиль).

// В PHP это делается с помощью ключевого слова new, после которого пишется имя класса:
new Car; // командуем заводу сделать автомобиль 


// Однако, если просто создать объект класса - это ни к чему не приведет (это все равно, что, к примеру, объявить массив и никуда его не записать). Нам нужна переменная для хранения этого объекта.

// Пусть эта переменная будет называться $myCar - запишем в нее созданный нами объект:
$myCar = new Car; // запишем  созданный объект в переменную  $myCar

// После создания автомобиля можно обращаться к его свойствам. Обращение к ним происходит через стрелочку ->. Давайте установим свойства нашего объекта:
$myCar = new Car; // командуем заводу сделать  автомобиль 

// Устанавливаем свойства объекта:
$myCar->color = 'red'; // красим в красный цвет 
$myCar->fuel = 50; // заливаем топливо 

// Все, наш автомобиль создан, покрашен и заправлен. Теперь мы можем отдавать ему команды через методы этого автомобиля.

// Обращение к методам также происходит через стрелочку, но, в отличие от свойства, после имени метода следует писать круглые скобки. Давайте покомандуем нашим объектом:
    $myCar->go();   // автомодиль->едь
	$myCar->turn(); // автомодиль->поверни 
	$myCar->stop(); // автомодиль->остановись 


//     Работа со свойствами объектов на PHP

// Сейчас мы с вами научимся работать с объектами и их свойствами на более практическом примере. Давайте сделаем класс User, который будет описывать юзера нашего сайта. Пусть у нашего пользователя будет два свойства: имя и возраст. Напишем код нашего класса:
class User
	{
		public $name; // свойство для имени
		public $age; // свойство для возраста
	}

//     Пока наш класс ничего не делает - он просто описывает, что будут иметь объекты этого класса (в нашем случае каждый объект будет иметь имя и возраст). По сути, пока мы не создадим хотя бы один объект нашего класса - ничего полезного не произойдет.

// Давайте создадим объект нашего класса. При этом нужно иметь ввиду, что классы принято называть большими буквами, а объекты этих классов - маленькими:
// Объявляем класс:
class User
{
    public $name;
    public $age;
}

// Создаем объект нашего класса:
$user = new User;

// Давайте теперь что-нибудь запишем в свойства нашего объекта, а потом выведем эти данные на экран:
class User
{
    public $name;
    public $age;
}
$user = new User; // создаем объект нашего класса 
$user->name = 'john'; // записываем имя в свойство name 
$user->age = 25; // записываем возраст в свойство age 

echo $user->name; // выводим записанное имя
echo $user->age; // выводим записанный возраст 

// Как вы уже поняли - в свойства объекта можно что-то записывать и из свойств можно выводить их содержимое. Давайте теперь сделаем 2 объекта-юзера: 'john' и 'eric', заполним их данными и выведем на экран сумму их возрастов:
class User
{
    public $name;
    public $age;
}

// Первый объект
$user1 = new User; // создаем первый объект 
$user1->name = 'john'; // записываем имя 
$user1->age = 25; // записываем возраст

// Второй объект
$user2 = new User; // создаем второй объект 
$user2->name = 'eric'; // записываем имя 
$user2->age = 30; // записываем возраст

// Найдем сумму возрастов:
echo $user1->age + $user2->age; 
// выведет 55 




// Работа с методами объектов

// Перейдем теперь к методам. Методы - это по сути функции которые может вызывать каждый объект. При написании кода разница между методами и свойствами в том, что для методов надо писать круглые скобки в конце, а для свойств - не надо.

// Давайте потренируемся - сделаем метод show(), который будет выводить некоторый текст:
class User
	{
		public $name;
		public $age;
		
		// Создаем метод:
		public function show()
		{
			return '!!!';
		}
	}
	
	$user = new User;
	$user->name = 'john';
	$user->age = 25;
	
	// Вызовем наш метод:
	echo $user->show(); // выведет 
		'!!!' 



    // Создаем метод:
		public function show($str)
		{
			return $str . '!!!';
		}
    // Вызовем наш метод:
	echo $user->show('hello'); // выведет 'hello!!!'



//     Обращение к свойствам класса через $this

// Пусть теперь наш метод show() выводит нечто полезное - имя пользователя, которое хранится в свойстве name. Для того, чтобы обратиться к свойству класса внутри метода этого класса, вместо имени объекта следует писать специальную переменную $this:
class User
{
    public $name;
    public $age;
    
    public function show()
    {
        return $this->name; // вернем имя из свойства 
    }
}


// С помощью $this свойства можно не только прочитывать, но и записывать. Давайте сделаем метод setName(), который параметром будем принимать имя пользователя и записывать его в свойство name:
class User
	{
		public $name;
		public $age;
		
		// Метод для изменения имени юзера:
		public function setName($name)
		{
			$this->name = $name; 
				// запишем новое значение свойства name 
		}
	}
	
	$user = new User; // создаем объект класса
	$user->name = 'john'; // записываем имя 
	$user->age = 25; // записываем возраст
	
	// Установим новое имя:
	$user->setName('eric');
	
	// Проверим, что имя изменилось:
	echo $user->name; // выведет 'eric'
?>

